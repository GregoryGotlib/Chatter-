{"version":3,"sources":["client/Login.jsx","client/Chat.jsx","client/Base.jsx","client/Home.jsx","client/About.jsx","client/CustomNavbar.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","CheckUser","_ref","User","isUser","error","SetUser","SubmitHandler","event","preventDefault","console","log","state","NickName","socket","emit","ChangeHandler","target","value","setState","ErrorMsg","_this2","react_default","a","createElement","className","onSubmit","reactstrap_es","id","body","inverse","color","ref","input","textInput","type","onChange","placeholder","Component","Chat","Message","MessageHandler","sender","name","CreateConnectedUsersList","users","usersList","val","push","Messages","on","info","ReceivedHandler","NewMsgList","slice","Users","map","data","onClick","logout","Base","bind","assertThisInitialized","LogOut","io","Chat_Chat","Login_Login","Home","Link","to","About","href","toggle","isOpen","light","expand","navbar","App","BrowserRouter","CustomNavbar_Home","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d238c47.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Card,CardTitle,Button,Jumbotron} from 'reactstrap';\r\nimport './Login.css';\r\n\r\nexport default class Login extends Component {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n\t\r\n\t  this.state = {\r\n\t  \tNickName:\"\",\r\n\t  \tErrorMsg:\"\"\r\n\t  };\r\n\t}\r\n\r\n\tCheckUser = ({User, isUser})=>{\r\n\t\tif(isUser){\r\n\t\t\tthis.error(\"This nick name is taken! try again..\")\r\n        }\r\n        else{\r\n\t\t\tthis.error(\"\")\r\n\t\t\tthis.props.SetUser(User)\r\n\t\t}\r\n\t}\r\n\r\n\tSubmitHandler = (event)=>{\r\n        event.preventDefault()\r\n        console.log(this.state.NickName)\r\n\t\tthis.props.socket.emit('VERIFY_USER', this.state.NickName, this.CheckUser)\r\n\t}\r\n\r\n\tChangeHandler = (event)=>{\r\n        console.log(event.target.value)\r\n\t\tthis.setState({NickName:event.target.value})\r\n\t}\r\n\r\n\terror = (error)=>{\r\n\r\n\t\tthis.setState({ErrorMsg:error})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"login\">\r\n\t\t\t\t<form onSubmit={this.SubmitHandler} className=\"login-form\" >\r\n\t\t\t\t\t<Jumbotron id=\"jum\" body inverse color=\"info\">\r\n\t\t\t\t\t\t<h1 id=\"h1\">Please provide nick name</h1>\r\n\t\t\t\t\t\t<hr className=\"my-8\" />\r\n\t\t\t\t\t\t<span>\r\n                        <input\r\n                            ref={(input)=>{ this.textInput = input }} \r\n                            type=\"text\"\r\n                            id=\"nickname\"\r\n                            value={this.state.NickName}\r\n                            onChange={this.ChangeHandler}\r\n                            placeholder={'nick name?'}\r\n                            />\r\n                    \t</span> \r\n\t\t\t\t\t\t<div className=\"errormsg\">{this.state.ErrorMsg ? this.state.ErrorMsg:null}</div>\r\n\t\t\t\t\t\t<Button id=\"add_b\" color=\"success\">Add nick name</Button>\r\n\t\t\t\t\t</Jumbotron>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","import React, { Component } from 'react';\r\nimport {Card,CardBody,CardTitle,CardFooter,Button} from 'reactstrap';\r\nimport './Chat.css';\r\nexport default class Chat extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            Messages:[],\r\n            Message:'',\r\n            usersList:[]\r\n        };\r\n\r\n\r\n        this.props.socket.on('RECEIVED_MESSAGE',function(info){\r\n            console.log('I received a message',info)\r\n            ReceivedHandler(info)\r\n        });\r\n\r\n        const ReceivedHandler = (info)=>{\r\n            var NewMsgList = this.state.Messages.slice()\r\n            NewMsgList.push(info)\r\n            this.setState({Messages: NewMsgList});\r\n                             \r\n        }\r\n\r\n    }\r\n   \r\n\r\n    ChangeHandler = (event)=>{\r\n        this.setState({Message:event.target.value})\r\n    }\r\n\r\n    MessageHandler = (event)=>{\r\n        event.preventDefault();\r\n        this.props.socket.emit('SEND_MESSAGE', {\r\n            sender: this.props.User.name,\r\n            Message: this.state.Message\r\n        });\r\n        this.setState({Message: ''});\r\n    }\r\n\r\n\r\n    CreateConnectedUsersList = (users)=>{\r\n        var usersList=[]\r\n        for(var val in users)\r\n        {   \r\n            usersList.push(users[val].name)\r\n            console.log(usersList)\r\n        }            \r\n        return usersList\r\n    }\r\n    \r\n\r\n    render() {\r\n        const Users = this.CreateConnectedUsersList(this.props.Users)\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-4\">\r\n                    <Card id=\"userscard\">\r\n                            <CardBody>\r\n                                <CardTitle id=\"cardTitle\">Connected Users</CardTitle>\r\n                                <hr/>  \r\n                                <div className=\"users\">{Users.map(data=>{\r\n                                    return(\r\n                                        <div id=\"setUser\">{data}</div>\r\n                                    )\r\n                                })}\r\n                                </div>   \r\n                            </CardBody>\r\n                            <CardFooter>\r\n                            </CardFooter>\r\n                        </Card>\r\n                        <Card id=\"card\">\r\n                            <CardBody>\r\n                                <CardTitle id=\"cardTitle\">Chatter - Wellcome {this.props.User.name}</CardTitle>\r\n                                <hr/>\r\n                                <div className=\"messages\">\r\n                                    {this.state.Messages.map(info => {\r\n                                        return (\r\n                                            <div id=\"sender\">{info.sender}: {info.Message}</div>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                            </CardBody>\r\n                            <CardFooter>\r\n                                <input id=\"input\" type=\"text\" placeholder=\"Message\" className=\"form-control\" value={this.state.Message} onChange={this.ChangeHandler}/>\r\n                                <br/>\r\n                                <Button id=\"button\" onClick={this.MessageHandler} color=\"success\">Send</Button>\r\n                                <Button id=\"logoutbutton\" onClick={this.props.logout} color=\"danger\" >Logout</Button>\r\n                            </CardFooter>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n      }\r\n}","import React, { Component } from 'react';\r\nimport io from \"socket.io-client\";\r\nimport Login from './Login.jsx';\r\nimport Chat from './Chat.jsx';\r\nimport './Base.css';\r\n\r\n\r\nexport default class Base extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n           User:null,\r\n           Users:[],\r\n           socket:null,\r\n        };          \r\n    }\r\n        \r\n    // Setting data first and then rendering\r\n    componentDidMount(){\r\n        const socket = io('/')\r\n        this.setState({socket})\r\n    }\r\n    \r\n\r\n    SetUser = (User)=>{\r\n        this.state.socket.emit('USER_CONNECTED', User);\r\n        this.setState({User:User})\r\n\r\n        this.state.socket.on('UPDATED_USERS_LIST',function(data){\r\n            this.setState({Users:data})\r\n           // console.log(this.state.Users)\r\n        }.bind(this));\r\n    }\r\n\r\n    LogOut = ()=>{\r\n        this.state.socket.emit('LOGOUT');\r\n        this.setState({User:null});\r\n\r\n        this.state.socket.on('USER_DISCONNECTED',function(users){\r\n            this.setState({Users:users})\r\n            console.log('after disconnection',this.state.Users)\r\n        }.bind(this));\r\n    }\r\n    \r\n    render() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t{\r\n\t\t\t\t\t!this.state.User ?\t\r\n\t\t\t\t\t<Login socket={this.state.socket} SetUser={this.SetUser} />\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<Chat socket={this.state.socket} User={this.state.User} Users={this.state.Users}  logout={this.LogOut}/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {Jumbotron ,Button} from 'reactstrap';\r\nimport './Home.css';\r\n\r\nexport default class Home extends Component{\r\n    render(){\r\n        return(\r\n        <div className=\"bg\">\r\n            <div className=\"container\">\r\n                <Jumbotron id=\"jum\">\r\n                    <h2 id=\"h2\">\r\n                        Wellcome to The Chatter application!\r\n                    </h2>\r\n                    <br/>\r\n                    <Link to=\"/Base\">\r\n                        <div className=\"btnp\">\r\n                        <hr className=\"my-8\" />\r\n                            <Button color=\"info\">\r\n                                Start Chatting \r\n                            </Button>\r\n                        </div>\r\n                    </Link>\r\n                </Jumbotron>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Jumbotron,Button } from 'reactstrap';\r\nimport './About.css';\r\n\r\nexport default class About extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <Jumbotron id=\"jum\">\r\n                    <h1 id=\"display-5\">Hello and Wellcome!</h1>\r\n                    <hr className=\"my-2\" />\r\n                    <p className=\"lead\">This is a simple Chat application, I made it in my free time to learn Web Development technologies.\r\n                    <br/>\r\n                     I developed it with React,Nodejs and Socket io.\r\n                    </p>\r\n                    <p className=\"lead\">You can share your opinion with me via email, Gregory.Gotlib@gmail.com.</p>\r\n                    <p id=\"end\">Please feel free to share and enjoy your stay.</p>\r\n                    <p className=\"lead\">\r\n                    <Button id=\"back_b\" color=\"info\" href=\"/\">Go back</Button>\r\n                    </p>\r\n                </Jumbotron>\r\n            </div>\r\n            )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './CustomNavbar.css';\r\nimport './About.jsx';\r\nimport {Navbar,NavbarToggler,NavbarBrand,Collapse,Nav,NavItem,NavLink,} from 'reactstrap';\r\n\r\n\r\nexport default class Home extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n          isOpen: false\r\n        };\r\n      }\r\n      toggle() {\r\n        this.setState({\r\n          isOpen: !this.state.isOpen\r\n        });\r\n      }\r\n    render(){\r\n        return(\r\n            <div>\r\n            <Navbar color=\"dark\" light expand=\"md\">\r\n              <NavbarBrand id=\"app_name\" href=\"/\">The Chatter</NavbarBrand>\r\n              <NavbarToggler onClick={this.toggle} />\r\n              <Collapse isOpen={this.state.isOpen} navbar>\r\n                <Nav className=\"ml-auto\" navbar>\r\n                  <NavItem>\r\n                    <NavLink id=\"link1\" href=\"https://github.com/GregoryGotlib/Chatter-.git\">GitHub</NavLink>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <NavLink id=\"link2\" href=\"/About\">About</NavLink>\r\n                  </NavItem>\r\n                </Nav>\r\n              </Collapse>\r\n            </Navbar>\r\n          </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router,Route } from 'react-router-dom';\nimport Base from './client/Base.jsx';\nimport Home from './client/Home.jsx';\nimport About from './client/About.jsx';\nimport CustomNavbar from './client/CustomNavbar.jsx';\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <CustomNavbar/>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/About\" component={About}/>\n          <Route path=\"/Base\" component={Base}/>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}