{"version":3,"sources":["client/Login.jsx","client/Chat.jsx","client/Base.jsx","client/Home.jsx","client/About.jsx","client/CustomNavbar.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","CheckUser","_ref","User","isUser","error","SetUser","SubmitHandler","event","preventDefault","console","log","state","NickName","socket","emit","ChangeHandler","target","value","setState","ErrorMsg","_this2","react_default","a","createElement","className","onSubmit","reactstrap_es","id","body","inverse","color","ref","input","textInput","type","onChange","placeholder","required","Component","Chat","Message","MessageHandler","sender","name","CreateConnectedUsersList","users","usersList","val","push","Messages","on","info","ReceivedHandler","NewMsgList","slice","Users","map","data","onClick","logout","Base","bind","assertThisInitialized","LogOut","io","Chat_Chat","Login_Login","Home","Link","to","About","href","toggle","isOpen","light","expand","navbar","App","BrowserRouter","CustomNavbar_Home","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9882f20a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Card,CardTitle,Button,Jumbotron} from 'reactstrap';\r\nimport './Login.css';\r\n\r\nexport default class Login extends Component {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n\t\r\n\t  this.state = {\r\n\t  \tNickName:\"\",\r\n\t  \tErrorMsg:\"\"\r\n\t  };\r\n\t}\r\n\r\n\tCheckUser = ({User, isUser})=>{\r\n\t\tif(isUser){\r\n\t\t\tthis.error(\"This nick name is taken! try again..\")\r\n        }\r\n        else{\r\n\t\t\tthis.error(\"\")\r\n\t\t\tthis.props.SetUser(User)\r\n\t\t}\r\n\t}\r\n\r\n\tSubmitHandler = (event)=>{\r\n        event.preventDefault()\r\n        console.log(this.state.NickName)\r\n\t\tthis.props.socket.emit('VERIFY_USER', this.state.NickName, this.CheckUser)\r\n\t}\r\n\r\n\tChangeHandler = (event)=>{\r\n        console.log(event.target.value)\r\n\t\tthis.setState({NickName:event.target.value})\r\n\t}\r\n\r\n\terror = (error)=>{\r\n\r\n\t\tthis.setState({ErrorMsg:error})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"login\">\r\n\t\t\t\t<form onSubmit={this.SubmitHandler} className=\"login-form\" >\r\n\t\t\t\t\t<Jumbotron id=\"juml\" body inverse color=\"info\">\r\n\t\t\t\t\t\t<h1 id=\"h1\">Please provide nick name</h1>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<span>\r\n                        <input\r\n                            ref={(input)=>{ this.textInput = input }} \r\n                            type=\"text\"\r\n                            id=\"nickname\"\r\n                            value={this.state.NickName}\r\n                            onChange={this.ChangeHandler}\r\n\t\t\t\t\t\t\tplaceholder={'nick name?'}\r\n\t\t\t\t\t\t\trequired=\"required\"\r\n                            />\r\n                    \t</span> \r\n\t\t\t\t\t\t<div className=\"errormsg\">{this.state.ErrorMsg ? this.state.ErrorMsg:null}</div>\r\n\t\t\t\t\t\t<Button id=\"add_b\" color=\"success\">Add nick name</Button>\r\n\t\t\t\t\t</Jumbotron>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","import React, { Component } from 'react';\r\nimport {Card,CardBody,CardTitle,CardFooter,Button} from 'reactstrap';\r\nimport './Chat.css';\r\nexport default class Chat extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            Messages:[],\r\n            Message:'',\r\n            usersList:[]\r\n        };\r\n\r\n\r\n        this.props.socket.on('RECEIVED_MESSAGE',function(info){\r\n            console.log('I received a message',info)\r\n            ReceivedHandler(info)\r\n        });\r\n\r\n        const ReceivedHandler = (info)=>{\r\n            var NewMsgList = this.state.Messages.slice()\r\n            NewMsgList.push(info)\r\n            this.setState({Messages: NewMsgList});\r\n                             \r\n        }\r\n\r\n    }\r\n   \r\n\r\n    ChangeHandler = (event)=>{\r\n        this.setState({Message:event.target.value})\r\n    }\r\n\r\n    MessageHandler = (event)=>{\r\n        event.preventDefault();\r\n        this.props.socket.emit('SEND_MESSAGE', {\r\n            sender: this.props.User.name,\r\n            Message: this.state.Message\r\n        });\r\n        this.setState({Message: ''});\r\n    }\r\n\r\n\r\n    CreateConnectedUsersList = (users)=>{\r\n        var usersList=[]\r\n        for(var val in users)\r\n        {   \r\n            usersList.push(users[val].name)\r\n            console.log(usersList)\r\n        }            \r\n        return usersList\r\n    }\r\n\r\n    render() {\r\n        const Users  = this.CreateConnectedUsersList(this.props.Users)\r\n        return (\r\n            <div className=\"chat_container\">\r\n                    <Card id=\"userscard\">\r\n                        <CardBody>\r\n                            <CardTitle id=\"users_title\">Connected Users</CardTitle>\r\n                            <hr id=\"hr\"/>  \r\n                            <div className=\"users\">{Users.map(data=>{\r\n                                return(\r\n                                    <ul>\r\n                                        <li>\r\n                                            <div id=\"data\">{data}</div>\r\n                                        </li>\r\n                                    </ul>\r\n                                )\r\n                            })}\r\n                            </div>   \r\n                        </CardBody>\r\n                    </Card>\r\n                    <Card id=\"chat_card\">\r\n                        <CardBody id=\"chat_card_body\">\r\n                            <CardTitle id=\"chat_card_title\">Chatter - Wellcome {this.props.User.name}</CardTitle>\r\n                            <hr id=\"hr\"/>\r\n                            <div className=\"messages\">\r\n                                {this.state.Messages.map(info => {\r\n                                    return (\r\n                                        <div>\r\n                                        <div id=\"sender\">{info.sender}: <div id=\"message\">{info.Message}</div></div>\r\n                                        <br/>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </CardBody>\r\n                            <CardFooter id=\"chat_card_footer\">\r\n                                <input id=\"input\" type=\"text\" placeholder=\"Message\" className=\"form-control\" value={this.state.Message} onChange={this.ChangeHandler}/>\r\n                                <br/>\r\n                                <div className=\"buttons\">\r\n                                    <Button id=\"button\" onClick={this.MessageHandler} color=\"success\">Send</Button>\r\n                                    <Button id=\"logoutbutton\" onClick={this.props.logout} color=\"danger\" >Logout</Button>\r\n                                </div>\r\n                            </CardFooter>\r\n                    </Card>\r\n            </div>\r\n        );\r\n      }\r\n}","import React, { Component } from 'react';\r\nimport io from \"socket.io-client\";\r\nimport Login from './Login.jsx';\r\nimport Chat from './Chat.jsx';\r\nimport './Base.css';\r\n\r\n\r\nexport default class Base extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n           User:null,\r\n           Users:[],\r\n           socket:null,\r\n        };          \r\n    }\r\n        \r\n    // Setting data first and then rendering\r\n    componentDidMount(){\r\n        const socket = io('/')\r\n        this.setState({socket})\r\n    }\r\n    \r\n\r\n    SetUser = (User)=>{\r\n        this.state.socket.emit('USER_CONNECTED', User);\r\n        this.setState({User:User})\r\n\r\n        this.state.socket.on('UPDATED_USERS_LIST',function(data){\r\n            this.setState({Users:data})\r\n           // console.log(this.state.Users)\r\n        }.bind(this));\r\n    }\r\n\r\n    LogOut = ()=>{\r\n        this.state.socket.emit('LOGOUT');\r\n        this.setState({User:null});\r\n\r\n        this.state.socket.on('USER_DISCONNECTED',function(users){\r\n            this.setState({Users:users})\r\n            console.log('after disconnection',this.state.Users)\r\n        }.bind(this));\r\n    }\r\n    \r\n    render() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t{\r\n\t\t\t\t\t!this.state.User ?\t\r\n\t\t\t\t\t<Login socket={this.state.socket} SetUser={this.SetUser} />\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<Chat socket={this.state.socket} User={this.state.User} Users={this.state.Users}  logout={this.LogOut}/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {Jumbotron ,Button} from 'reactstrap';\r\nimport './Home.css';\r\n\r\nexport default class Home extends Component{\r\n    render(){\r\n        return(\r\n        <div className=\"bg\">\r\n            <div className=\"containerh\">\r\n                <Jumbotron id=\"jumh\">\r\n                    <h2 id=\"h2\">\r\n                        Wellcome to The Chatter application!\r\n                    </h2>\r\n                    <br/>\r\n                    <Link to=\"/Base\">\r\n                        <div className=\"btnp\">\r\n                        <hr className=\"my-8\" />\r\n                            <Button color=\"info\">\r\n                                Start Chatting \r\n                            </Button>\r\n                        </div>\r\n                    </Link>\r\n                </Jumbotron>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Jumbotron,Button } from 'reactstrap';\r\nimport './About.css';\r\n\r\nexport default class About extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"containera\">\r\n                <Jumbotron id=\"jumb\">\r\n                    <h1 id=\"p\">Hello and Wellcome!</h1>\r\n                    <hr/>\r\n                    <p className=\"p1\">This is real-time Chat application, I made it while learning Web Development technologies.\r\n                    <br/>\r\n                     I developed it with React,Nodejs and Socket io.\r\n                    </p>\r\n                    <p className=\"p1\">You can share your opinion with me via email, GregoryGotlib@gmail.com.</p>\r\n                    <p className=\"p3\">\r\n                    <Button id=\"back_b\" color=\"info\" href=\"/\">Go back</Button>\r\n                    </p>\r\n                </Jumbotron>\r\n            </div>\r\n            )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './CustomNavbar.css';\r\nimport './About.jsx';\r\nimport {Navbar,NavbarToggler,NavbarBrand,Collapse,Nav,NavItem,NavLink,} from 'reactstrap';\r\n\r\n\r\nexport default class Home extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n          isOpen: false\r\n        };\r\n      }\r\n      toggle() {\r\n        this.setState({\r\n          isOpen: !this.state.isOpen\r\n        });\r\n      }\r\n    render(){\r\n        return(\r\n            <div>\r\n            <Navbar color=\"dark\" light expand=\"md\">\r\n              <NavbarBrand id=\"app_name\" href=\"/\">The Chatter</NavbarBrand>\r\n              <NavbarToggler onClick={this.toggle} />\r\n              <Collapse isOpen={this.state.isOpen} navbar>\r\n                <Nav className=\"ml-auto\" navbar>\r\n                  <NavItem>\r\n                    <NavLink id=\"link1\" href=\"https://github.com/GregoryGotlib/Chatter-.git\">GitHub</NavLink>\r\n                  </NavItem>\r\n                  <NavItem>\r\n                    <NavLink id=\"link2\" href=\"/About\">About</NavLink>\r\n                  </NavItem>\r\n                </Nav>\r\n              </Collapse>\r\n            </Navbar>\r\n          </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router,Route } from 'react-router-dom';\nimport Base from './client/Base.jsx';\nimport Home from './client/Home.jsx';\nimport About from './client/About.jsx';\nimport CustomNavbar from './client/CustomNavbar.jsx';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <CustomNavbar/>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/About\" component={About}/>\n          <Route path=\"/Base\" component={Base}/>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}